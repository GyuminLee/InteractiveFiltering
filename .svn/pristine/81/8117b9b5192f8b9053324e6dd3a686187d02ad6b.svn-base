package org.processmining.ericverbeek.plugins;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.processmining.contexts.uitopia.UIPluginContext;
import org.processmining.contexts.uitopia.annotations.UITopiaVariant;
import org.processmining.ericverbeek.algorithms.DependencyAlgorithm;
import org.processmining.framework.plugin.annotations.Plugin;
import org.processmining.framework.plugin.annotations.PluginVariant;
import org.processmining.framework.util.HTMLToString;

@Plugin(name = "[admin] EstablishedPackages dependencies", parameterLabels = { }, returnLabels = { "Master package file" }, returnTypes = { HTMLToString.class }, userAccessible = true, help = "Creates the contents of the master package file, given the lists of established, runner-up, and start packages and the list of dependencies. This latter list can be generated on the ais-hudson server.")
public class EstablishedPackagesPlugin extends DependencyAlgorithm {

	@UITopiaVariant(affiliation = UITopiaVariant.EHV, author = "H.M.W. Verbeek", email = "h.m.w.verbeek@tue.nl", pack = "EricVerbeek")
	@PluginVariant(variantLabel = "Default", requiredParameterLabels = { })
	public static HTMLToString info(final UIPluginContext context) {
		return new EstablishedPackagesPlugin();
	}

	/*
	 * Compare packages on their lower-case names, like Hudson does. Keeps them in-line.
	 */
	public Comparator<String> myComparator = new Comparator<String>() {
		public int compare(String s, String t) {
			return s.toLowerCase().compareTo(t.toLowerCase());
		}
	};
	
	public String toHTMLString(boolean includeHTMLTags) {
		StringBuffer buffer = new StringBuffer();
		if (includeHTMLTags) {
			buffer.append("<html>");
		}
		buffer.append("<p>");
		buffer.append("&nbsp;&nbsp;&lt;!-- Date " + date + " --&gt;<br>");
		Set<Integer> uniqueLevels = new HashSet<Integer>(levels.values());
		List<Integer> sortedLevels = new ArrayList<Integer>(uniqueLevels);
		Collections.sort(sortedLevels);
		List<String> sortedPacks = new ArrayList<String>(levels.keySet());
		Collections.sort(sortedPacks, myComparator);
		for (int level : sortedLevels) {
			buffer.append("&nbsp;&nbsp;&lt;!-- Established " + level + " --&gt;<br>");
			for (String pack : sortedPacks) {
				if (levels.get(pack) == level) {
					if (established.keySet().contains(pack) && !pack.equals("EstablishedPackages")) {
						buffer.append("&nbsp;&nbsp;&nbsp;&nbsp;&lt;dependency name=\"" + pack + "\" /&gt;<br>");
					}
				}
			}
		}
		buffer.append("</p>");
		if (includeHTMLTags) {
			buffer.append("</html>");
		}
		return buffer.toString();
	}
}
