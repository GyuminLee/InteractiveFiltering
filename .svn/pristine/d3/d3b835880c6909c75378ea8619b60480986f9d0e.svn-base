package org.processmining.ericverbeek.models;

import java.util.Collection;
import java.util.Set;

import org.processmining.ericverbeek.workspaces.DeselEsparzaReductionWorkspace;
import org.processmining.models.graphbased.directed.petrinet.PetrinetNode;
import org.processmining.models.graphbased.directed.petrinet.elements.Place;
import org.processmining.models.graphbased.directed.petrinet.elements.Transition;

public class DeselEsparzaTransitionReduction implements DeselEsparzaReduction {

	/*
	 * The reduced transition.
	 */
	private Transition transition;
	/*
	 * The transitions on which the reduced transition was nonnegatively
	 * linearly dependent.
	 */
	private Set<Transition> transitions;
	/*
	 * Whether reversed.
	 */
	private boolean isReversed;

	public Transition getTransition() {
		return transition;
	}

	public void setTransition(Transition transition) {
		this.transition = transition;
	}

	public Set<Transition> getTransitions() {
		return transitions;
	}

	public void setTransitions(Set<Transition> transitions) {
		this.transitions = transitions;
	}

	public boolean isReversed() {
		return isReversed;
	}

	public void setReversed(boolean isReversed) {
		this.isReversed = isReversed;
	}

	public void apply(DeselEsparzaReductionWorkspace ws) {
		ws.workNet.getNet().removeTransition(transition);
		// Update layout
		if (transitions.size() == 0) {
			Place place = (Place) (ws.presets.get(transition).isEmpty() ? ws.postsets.get(transition).iterator().next()
					: ws.presets.get(transition).iterator().next());
			DeselEsparzaBlock block = new DeselEsparzaVerticalBlock(ws.layoutMap.get(place),
					ws.layoutMap.get(transition), ws, false, DeselEsparzaVerticalBlock.VALIGNTOP);
//			block = new DeselEsparzaVerticalBlock(ws.layoutMap.get(transition), block, ws, false);
			ws.layoutMap.put(place, block);
		} else if (!isReversed) {
			if (!ws.presets.get(transition).isEmpty()) {
				Place prePlace = (Place) ws.presets.get(transition).iterator().next();
				Collection<PetrinetNode> siblingTransitions = ws.postsets.get(prePlace);
				siblingTransitions.retainAll(transitions);
				Transition siblingTransition = (Transition) siblingTransitions.iterator().next();
				DeselEsparzaBlock block = new DeselEsparzaVerticalBlock(ws.layoutMap.get(siblingTransition),
						ws.layoutMap.get(transition), ws, false);
				ws.layoutMap.put(siblingTransition, block);
			} else if (!ws.postsets.get(transition).isEmpty()) {
				Place postPlace = (Place) ws.postsets.get(transition).iterator().next();
				Collection<PetrinetNode> siblingTransitions = ws.presets.get(postPlace);
				siblingTransitions.retainAll(transitions);
				Transition siblingTransition = (Transition) siblingTransitions.iterator().next();
				DeselEsparzaBlock block = new DeselEsparzaVerticalBlock(ws.layoutMap.get(siblingTransition),
						ws.layoutMap.get(transition), ws, false);
				ws.layoutMap.put(siblingTransition, block);
			}
		} else {
			if (!ws.postsets.get(transition).isEmpty()) {
				Place prePlace = (Place) ws.postsets.get(transition).iterator().next();
				Collection<PetrinetNode> siblingTransitions = ws.postsets.get(prePlace);
				siblingTransitions.retainAll(transitions);
				Transition siblingTransition = (Transition) siblingTransitions.iterator().next();
				DeselEsparzaBlock block = new DeselEsparzaVerticalBlock(ws.layoutMap.get(siblingTransition),
						ws.layoutMap.get(transition), ws, true);
				ws.layoutMap.put(siblingTransition, block);
			} else if (!ws.presets.get(transition).isEmpty()) {
				Place postPlace = (Place) ws.presets.get(transition).iterator().next();
				Collection<PetrinetNode> siblingTransitions = ws.presets.get(postPlace);
				siblingTransitions.retainAll(transitions);
				Transition siblingTransition = (Transition) siblingTransitions.iterator().next();
				DeselEsparzaBlock block = new DeselEsparzaVerticalBlock(ws.layoutMap.get(siblingTransition),
						ws.layoutMap.get(transition), ws, true);
				ws.layoutMap.put(siblingTransition, block);
			}
		}
		ws.update();
	}

	public String toString() {
		return "Transition[" + isReversed + "](" + transition + "," + transitions + ")";
	}

	public double score(DeselEsparzaReductionWorkspace ws) {
		if (transitions.size() == 0) {
			return 1.0;
		}
		for (PetrinetNode node : ws.presets.get(transition)) {
			if (ws.postsets.get(node).size() == 1) {
				return 0.0;
			}
		}
		for (PetrinetNode node : ws.postsets.get(transition)) {
			if (ws.presets.get(node).size() == 1) {
				return 0.0;
			}
		}
		return 1.0 / (transitions.size());
	}

	public boolean hasOptimalScore(DeselEsparzaReductionWorkspace ws) {
		return score(ws) == 1.0;
	}
}
